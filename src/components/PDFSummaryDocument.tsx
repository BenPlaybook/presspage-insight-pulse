import React from 'react';
import { Document, Page, Text, View, StyleSheet } from '@react-pdf/renderer';

// Create styles
const styles = StyleSheet.create({
  page: {
    flexDirection: 'column',
    backgroundColor: '#ffffff',
    padding: 30,
    fontFamily: 'Helvetica',
  },
  header: {
    marginBottom: 20,
    borderBottom: 2,
    borderBottomColor: '#2563eb',
    paddingBottom: 10,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1f2937',
    marginBottom: 5,
  },
  subtitle: {
    fontSize: 12,
    color: '#6b7280',
    marginBottom: 2,
  },
  summaryTypeTag: {
    backgroundColor: '#dbeafe',
    color: '#1d4ed8',
    padding: 5,
    borderRadius: 4,
    fontSize: 10,
    fontWeight: 'bold',
    marginTop: 5,
    alignSelf: 'flex-start',
  },
  content: {
    marginTop: 20,
    lineHeight: 1.6,
  },
  section: {
    marginBottom: 15,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1f2937',
    marginBottom: 8,
  },
  text: {
    fontSize: 11,
    color: '#374151',
    lineHeight: 1.5,
    marginBottom: 5,
  },
  bulletPoint: {
    fontSize: 11,
    color: '#374151',
    marginLeft: 15,
    marginBottom: 5,
  },
  bulletPointBold: {
    fontSize: 11,
    color: '#374151',
    marginLeft: 15,
    marginBottom: 5,
    fontWeight: 'bold',
  },
  actionItem: {
    fontSize: 11,
    color: '#374151',
    marginLeft: 20,
    marginBottom: 3,
  },
  footer: {
    marginTop: 'auto',
    paddingTop: 20,
    borderTop: 1,
    borderTopColor: '#e5e7eb',
    textAlign: 'center',
  },
  footerText: {
    fontSize: 8,
    color: '#9ca3af',
  },
  prHealthSection: {
    marginTop: 20,
    marginBottom: 20,
    padding: 15,
    backgroundColor: '#f8fafc',
    borderRadius: 8,
  },
  prHealthTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#1f2937',
    marginBottom: 10,
  },
  prHealthScore: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2563eb',
    marginBottom: 10,
  },
  metricRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  metricLabel: {
    fontSize: 10,
    color: '#374151',
    flex: 1,
  },
  metricValue: {
    fontSize: 10,
    color: '#1f2937',
    fontWeight: 'bold',
    marginLeft: 10,
  },
  recommendationContainer: {
    marginTop: 15,
    padding: 10,
    backgroundColor: '#fef3c7',
    borderRadius: 6,
    borderLeft: '3px solid #f59e0b',
  },
  recommendationTitle: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#92400e',
    marginBottom: 8,
  },
  recommendation: {
    fontSize: 10,
    color: '#374151',
    lineHeight: 1.4,
  },
});

type PDFSummaryDocumentProps = {
  accountName: string;
  summaryType: 'internal' | 'customer';
  summaryContent: string;
  prHealthData?: {
    overallScore: number;
    metrics: {
      publishingVelocity: number;
      distributionReach: number;
      pickupQuality: number;
      organicFindability: number;
      competitorBenchmark: number;
    };
    recommendation: string;
  };
  generatedDate: string;
};

export const PDFSummaryDocument = ({
  accountName,
  summaryType,
  summaryContent,
  prHealthData,
  generatedDate,
}: PDFSummaryDocumentProps) => {
  // Handle empty or null content
  if (!summaryContent || summaryContent.trim() === '') {
    return (
      <Document>
        <Page size="A4" style={styles.page}>
          <View style={styles.header}>
            <Text style={styles.title}>AI Summary Report</Text>
            <Text style={styles.subtitle}>Account: {accountName}</Text>
            <Text style={styles.subtitle}>Generated: {generatedDate}</Text>
            <View style={styles.summaryTypeTag}>
              <Text>{summaryType.charAt(0).toUpperCase() + summaryType.slice(1)} Version</Text>
            </View>
          </View>

          <View style={styles.content}>
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>No Content Available</Text>
              <Text style={styles.text}>
                No AI summary content is available for this account at the moment. 
                Please check back later or contact support if you need assistance.
              </Text>
            </View>
          </View>

          <View style={styles.footer}>
            <Text style={styles.footerText}>
              Generated by PressPage Insight Pulse - {new Date().toISOString()}
            </Text>
          </View>
        </Page>
      </Document>
    );
  }

  // Parse markdown-like content for better PDF formatting
  const parseContent = (content: string) => {
    const lines = content.split('\n').filter(line => line.trim());
    const sections: Array<{ title: string; items: string[] }> = [];
    let currentSection: { title: string; items: string[] } | null = null;

    lines.forEach(line => {
      const trimmedLine = line.trim();
      
      if (trimmedLine.startsWith('###')) {
        if (currentSection) {
          sections.push(currentSection);
        }
        currentSection = {
          title: trimmedLine.replace('###', '').trim(),
          items: []
        };
      } else if (trimmedLine.startsWith('*') || trimmedLine.match(/^\d+\./)) {
        if (currentSection) {
          // Clean up the bullet point and remove markdown formatting
          let cleanItem = trimmedLine.replace(/^[\*\d\.]\s*/, '');
          // Remove bold formatting
          cleanItem = cleanItem.replace(/\*\*(.*?)\*\*/g, '$1');
          // Remove italic formatting
          cleanItem = cleanItem.replace(/\*(.*?)\*/g, '$1');
          // Remove code formatting
          cleanItem = cleanItem.replace(/`(.*?)`/g, '$1');
          currentSection.items.push(cleanItem);
        }
      } else if (trimmedLine && currentSection) {
        // Clean up regular text and remove markdown formatting
        let cleanItem = trimmedLine;
        // Remove bold formatting
        cleanItem = cleanItem.replace(/\*\*(.*?)\*\*/g, '$1');
        // Remove italic formatting
        cleanItem = cleanItem.replace(/\*(.*?)\*/g, '$1');
        // Remove code formatting
        cleanItem = cleanItem.replace(/`(.*?)`/g, '$1');
        currentSection.items.push(cleanItem);
      }
    });

    if (currentSection) {
      sections.push(currentSection);
    }

    // If no sections were found, create a default section with the content
    if (sections.length === 0) {
      sections.push({
        title: 'Summary',
        items: lines.map(line => {
          let cleanLine = line.trim();
          // Remove markdown formatting
          cleanLine = cleanLine.replace(/\*\*(.*?)\*\*/g, '$1');
          cleanLine = cleanLine.replace(/\*(.*?)\*/g, '$1');
          cleanLine = cleanLine.replace(/`(.*?)`/g, '$1');
          return cleanLine;
        }).filter(line => line.length > 0)
      });
    }

    return sections;
  };

  const sections = parseContent(summaryContent);

  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <View style={styles.header}>
          <Text style={styles.title}>AI Summary Report</Text>
          <Text style={styles.subtitle}>Account: {accountName}</Text>
          <Text style={styles.subtitle}>Generated: {generatedDate}</Text>
          <View style={styles.summaryTypeTag}>
            <Text>{summaryType.charAt(0).toUpperCase() + summaryType.slice(1)} Version</Text>
          </View>
        </View>

        <View style={styles.content}>
          {sections.map((section, index) => (
            <View key={index} style={styles.section}>
              <Text style={styles.sectionTitle}>{section.title}</Text>
              {section.items.map((item, itemIndex) => {
                // Check if this item looks like a section header (contains colon and is short)
                const isSectionHeader = item.includes(':') && item.length < 50;
                
                return (
                  <Text key={itemIndex} style={isSectionHeader ? styles.bulletPointBold : styles.bulletPoint}>
                    â€¢ {item}
                  </Text>
                );
              })}
            </View>
          ))}

          {/* PR Health Score Section */}
          {prHealthData && (
            <View style={styles.prHealthSection}>
              <Text style={styles.prHealthTitle}>PR Health Score</Text>
              <Text style={styles.prHealthScore}>{prHealthData.overallScore}%</Text>
              
              <View style={styles.metricRow}>
                <Text style={styles.metricLabel}>Publishing Velocity</Text>
                <Text style={styles.metricValue}>{prHealthData.metrics.publishingVelocity}%</Text>
              </View>
              
              <View style={styles.metricRow}>
                <Text style={styles.metricLabel}>Distribution Reach</Text>
                <Text style={styles.metricValue}>{prHealthData.metrics.distributionReach}%</Text>
              </View>
              
              <View style={styles.metricRow}>
                <Text style={styles.metricLabel}>Pickup Quality</Text>
                <Text style={styles.metricValue}>{prHealthData.metrics.pickupQuality}%</Text>
              </View>
              
              <View style={styles.metricRow}>
                <Text style={styles.metricLabel}>Organic Findability</Text>
                <Text style={styles.metricValue}>{prHealthData.metrics.organicFindability}%</Text>
              </View>
              
              <View style={styles.metricRow}>
                <Text style={styles.metricLabel}>Competitor Benchmark</Text>
                <Text style={styles.metricValue}>{prHealthData.metrics.competitorBenchmark}%</Text>
              </View>

              {prHealthData.recommendation && (
                <View style={styles.recommendationContainer}>
                  <Text style={styles.recommendationTitle}>Recommendations</Text>
                  {prHealthData.recommendation.split('\n\n').map((paragraph, index) => (
                    <Text key={index} style={styles.recommendation}>
                      {paragraph}
                    </Text>
                  ))}
                </View>
              )}
            </View>
          )}
        </View>

        <View style={styles.footer}>
          <Text style={styles.footerText}>
            Generated by PressPage Insight Pulse - {new Date().toISOString()}
          </Text>
        </View>
      </Page>
    </Document>
  );
};