import React from 'react';
import { Document, Page, Text, View, StyleSheet } from '@react-pdf/renderer';

// Create styles
const styles = StyleSheet.create({
  page: {
    flexDirection: 'column',
    backgroundColor: '#ffffff',
    padding: 30,
    fontFamily: 'Helvetica',
  },
  header: {
    marginBottom: 20,
    borderBottom: 2,
    borderBottomColor: '#2563eb',
    paddingBottom: 10,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1f2937',
    marginBottom: 5,
  },
  subtitle: {
    fontSize: 12,
    color: '#6b7280',
    marginBottom: 2,
  },
  summaryTypeTag: {
    backgroundColor: '#dbeafe',
    color: '#1d4ed8',
    padding: 5,
    borderRadius: 4,
    fontSize: 10,
    fontWeight: 'bold',
    marginTop: 5,
    alignSelf: 'flex-start',
  },
  content: {
    marginTop: 20,
    lineHeight: 1.6,
  },
  section: {
    marginBottom: 15,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1f2937',
    marginBottom: 8,
  },
  text: {
    fontSize: 11,
    color: '#374151',
    lineHeight: 1.5,
    marginBottom: 5,
  },
  bulletPoint: {
    fontSize: 11,
    color: '#374151',
    marginLeft: 15,
    marginBottom: 5,
  },
  actionItem: {
    fontSize: 11,
    color: '#374151',
    marginLeft: 20,
    marginBottom: 3,
  },
  footer: {
    marginTop: 'auto',
    paddingTop: 20,
    borderTop: 1,
    borderTopColor: '#e5e7eb',
    textAlign: 'center',
  },
  footerText: {
    fontSize: 8,
    color: '#9ca3af',
  },
});

type PDFSummaryDocumentProps = {
  accountName: string;
  summaryType: 'internal' | 'customer';
  summaryContent: string;
  generatedDate: string;
};

export const PDFSummaryDocument = ({
  accountName,
  summaryType,
  summaryContent,
  generatedDate,
}: PDFSummaryDocumentProps) => {
  // Parse markdown-like content for better PDF formatting
  const parseContent = (content: string) => {
    const lines = content.split('\n').filter(line => line.trim());
    const sections: Array<{ title: string; items: string[] }> = [];
    let currentSection: { title: string; items: string[] } | null = null;

    lines.forEach(line => {
      const trimmedLine = line.trim();
      
      if (trimmedLine.startsWith('###')) {
        if (currentSection) {
          sections.push(currentSection);
        }
        currentSection = {
          title: trimmedLine.replace('###', '').trim(),
          items: []
        };
      } else if (trimmedLine.startsWith('*') || trimmedLine.match(/^\d+\./)) {
        if (currentSection) {
          currentSection.items.push(trimmedLine.replace(/^[\*\d\.]\s*/, ''));
        }
      } else if (trimmedLine && currentSection) {
        currentSection.items.push(trimmedLine);
      }
    });

    if (currentSection) {
      sections.push(currentSection);
    }

    return sections;
  };

  const sections = parseContent(summaryContent);

  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <View style={styles.header}>
          <Text style={styles.title}>AI Summary Report</Text>
          <Text style={styles.subtitle}>Account: {accountName}</Text>
          <Text style={styles.subtitle}>Generated: {generatedDate}</Text>
          <View style={styles.summaryTypeTag}>
            <Text>{summaryType.charAt(0).toUpperCase() + summaryType.slice(1)} Version</Text>
          </View>
        </View>

        <View style={styles.content}>
          {sections.map((section, index) => (
            <View key={index} style={styles.section}>
              <Text style={styles.sectionTitle}>{section.title}</Text>
              {section.items.map((item, itemIndex) => (
                <Text key={itemIndex} style={styles.bulletPoint}>
                  â€¢ {item}
                </Text>
              ))}
            </View>
          ))}
        </View>

        <View style={styles.footer}>
          <Text style={styles.footerText}>
            Generated by PressPage Insight Pulse - {new Date().toISOString()}
          </Text>
        </View>
      </Page>
    </Document>
  );
};